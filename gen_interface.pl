#! /usr/bin/env - perl
{
    local ($/, *INPUT);
	
    unless (open(INPUT,"<evpath.h")) {
	die "sudden flaming death, no evpath.h\n";
    }

    $_ = <INPUT>;
    s[/\*NOLOCK\*/][NOLOCK]g;
    s{/\*.+\*/}{}g;
    @f = split(/\n/);
    close INPUT;
}
LINE:
for (@f) {
    if (/NOLOCK/) {
	$nolock = 1;
    }
    if (/^extern/) {
	next LINE if (/\"C\"/);
	$decl = "";
	if ($nolock == 1) {$decl = "NOLOCK";}
	$nolock = 0;
	$pending = 1;
    }
    if (($pending) && /;/) {
	$decl = $decl . " " . $_;
	push (@DECLS, $decl);
	$pending = 0;
    }
    if ($pending) {
	$decl = $decl . " " . $_;
    }
}
for (@DECLS) {
    $nolock = 0;
    if (/NOLOCK/) {
	s/NOLOCK//g;
	$nolock = 1;
    }
    if (/extern\W+(\w+\W+)(\w+).*\((.*)\)/) {
	$return = $1;
	$name = $2;
	$_ = $3;
	s/\)//g;
	s/\s+/ /g;
	$return_type{$name} = $return;
	$args = $_;
	$arguments{$name} = "$args";
    }
    if ($nolock == 1) {
	$nolocking{$name} = 1;
    }
}

open FIXUP, ">fixup.pl";
print FIXUP "#!/usr/bin/env perl -pi.bak\n";
unless (open (INT, ">cm_interface.c")) { die "Failed to open cm_interface.c";}
print INT<<EOF;
/*
 *  This file is automatically generated by gen_interface.pl from evpath.h.
 *
 *  DO NOT EDIT
 *
 */
#include "io.h"
#include "atl.h"
#include "evpath.h"
#include "cm_internal.h"
#ifdef	__cplusplus
extern "C" \{
#endif
EOF
    foreach $subr (keys %return_type) {
	print INT "\nextern $return_type{$subr}\n";
	print INT "$subr ( $arguments{$subr} )\n";
	print INT "{\n";
	undef $cmanager;
	undef $cmconnection;
	undef $evsource;
	undef $cmtaskhandle;
	undef $cmformat;
	foreach $arg (split ( ",", $arguments{$subr})) {
	    $_ = $arg;
	    if (/\W+(\w+)\W*$/) {
		$name = $1;
	    }
	    if (/CManager/) {
		$cmanager = $name;
	    }
	    if (/CMConnection/) {
		$cmconnection = $name;
	    }
	    if (/EVsource/) {
		$evsource = $name;
	    }
	    if (/CMTaskHandle/) {
		$cmtaskhandle = $name;
	    }
	    if ((/CMFormat/) && (!/CMFormatList/)){
		$cmformat = $name;
	    }
	}

	$_ = $return_type{$subr};
	if (/^\s*void\s*$/) {
	    $return_type{$subr} = "void";
	}
	if ($return_type{$subr} ne "void") {
	    print INT "\t$return_type{$subr} ret;\n";
	}
	if (!defined($nolocking{$subr})) {
	    if (defined($cmanager)) {
		print INT "\tCManager_lock($cmanager);\n";
	    } else {
		if (defined($cmconnection)) {
		    print INT "\tCManager cm = $cmconnection->cm;\n";
		} elsif (defined($evsource)) {
		    print INT "\tCManager cm = $evsource->cm;\n";
		} elsif (defined($cmtaskhandle)) {
		    print INT "\tCManager cm = $cmtaskhandle->cm;\n";
		} elsif (defined($cmformat)) {
		    print INT "\tCManager cm = $cmformat->cm;\n";
		} else {
#		    print INT "\tCManager cm = duh;\n";
		}
		print INT "\tCManager_lock(cm);\n";
	    }
	}
	if ($return_type{$subr} eq "void") {
	    print INT "\t";
	} else {
	    print INT "\tret = ";
	}

	print INT "INT_$subr(";
	$first = 1;
	foreach $arg (split ( ",", $arguments{$subr})) {
	    if ($first != 1) {
		print INT ", ";
	    } else {
		$first = 0;
	    }
	    $_ = $arg;
	    if (/\W+(\w+)\W*$/) {
		print INT "$1";
	    }
	}
	print INT ");\n";
	if ((!defined($nolocking{$subr})) && ($subr ne "CManager_close")) {
	    if (defined($cmanager)) {
		print INT "\tCManager_unlock($cmanager);\n";
	    } else {
		print INT "\tCManager_unlock(cm);\n";
	    }
	}
	print INT "\treturn ret;\n" unless ($return_type{$subr} eq "void");
	print INT "}\n";
	print FIXUP "s/$subr/INT_$subr/g unless /INT_$subr/;\n";
    }
print "done\n";

print INT<<EOF;
#ifdef	__cplusplus
\}
#endif
EOF
close INT;
close FIXUP;
